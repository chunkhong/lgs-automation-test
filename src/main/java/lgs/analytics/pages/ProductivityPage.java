package lgs.analytics.pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import lgs.analytics.base.TestBase;

public class ProductivityPage extends TestBase{
	@FindBy(css="div[tab-order=\"40000\"] .slicer-dropdown-menu")
	WebElement prfYrFilter;
	
	@FindBy(css="span[title=\"PF 2020\"]")
	WebElement prfYr2020;
	
	@FindBy(css="div[tab-order=\"46000\"] .slicer-dropdown-menu")
	WebElement currencyFilter;
	
	@FindBy(css="span[title=\"Local Currency\"]")
	WebElement localCurrency;
	
	@FindBy(css="div[title=\"Productivity\"]")
	WebElement pageHeader;
	
	@FindBy(css="div[title=\"Revenue\"]")
	WebElement revenueTitle;
	
	@FindBy(css="div[tab-order=\"65000\"] .cartesianChart")
	WebElement revenueChart;
	
	@FindBy(css="div[tab-order=\"41000\"] .bodyCells")
	WebElement revenuePivotTable;
	
	@FindBy(css="div[title=\"Revenue per Contributing ABO\"]")
	WebElement revenuePerABOTitle;
	
	@FindBy(css="div[tab-order=\"73000\"] .cartesianChart")
	WebElement revenuePerABOChart;
	
	@FindBy(css="div[tab-order=\"42000\"] .bodyCells")
	WebElement revenuePerABOPivotTable;
	
	@FindBy(css="div[title=\"Group Sales PV\"]")
	WebElement groupSalesPVTitle;
	
	@FindBy(css="div[tab-order=\"82000\"] .cartesianChart")
	WebElement groupSalesPVChart;
	
	@FindBy(css="div[tab-order=\"43000\"] .bodyCells")
	WebElement groupSalesPVPivotTable;
	
	@FindBy(css="div[title=\"Group Sales PV per Contributing ABO\"]")
	WebElement groupSalesPVperABOTitle;
	
	@FindBy(css="div[tab-order=\"83000\"] .cartesianChart")
	WebElement groupSalesPVperABOChart;
	
	@FindBy(css="div[tab-order=\"44000\"] .bodyCells")
	WebElement groupSalesPVperABOPivotTable;
	
	@FindBy(css="div[title=\"Customer & Member PV per Contributing ABO\"]")
	WebElement custMemberTitle;
	
	@FindBy(css="div[tab-order=\"11000\"] .cartesianChart")
	WebElement custMemberChart;
	
	@FindBy(css="div[tab-order=\"12000\"] .bodyCells")
	WebElement custMemberPivotTable;
	
	@FindBy(css="div[title=\"Verified Customer Sales PV per Contributing ABO\"]")
	WebElement vcsPVTitle;
	
	@FindBy(css="div[tab-order=\"111000\"] .cartesianChart")
	WebElement vcsPVChart;
	
	@FindBy(css="div[tab-order=\"110000\"] .bodyCells")
	WebElement vcsPVPivotTable;
	
	@FindBy(css="div[title=\"Percentage of Group Sales PV Generated by Customers / Members\"]")
	WebElement perctGSPVTitle;
	
	@FindBy(css="div[tab-order=\"22000\"] .cartesianChart")
	WebElement perctGSPVChart;
	
	@FindBy(css="div[tab-order=\"23000\"] .bodyCells")
	WebElement perctGSPVPivotTable;
	
	//Initializing Page Objects
	public ProductivityPage() {
		PageFactory.initElements(driver, this);
	}
			
	//Actions
	public void scrollToElement(String title) {
		if (title == "Revenue Per ABO") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(revenuePerABOChart);
		    a.perform();
		}else if (title == "Group Sales PV") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(groupSalesPVChart);
		    a.perform();
		}else if (title == "Group Sales PV Per ABO") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(groupSalesPVperABOChart);
		    a.perform();
		}else if (title == "Customer & Member") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(custMemberChart);
		    a.perform();
		}else if (title == "VCS PV") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(vcsPVChart);
		    a.perform();
		}else if (title == "Percentage of Group Sales PV") {
			// Actions class with moveToElement()
		    Actions a = new Actions(driver);
		    a.moveToElement(perctGSPVChart);
		    a.perform();
		}
	}
	
	public void clickPrfYrFilter() {
		prfYrFilter.click();
	}
	
	public void select2020PrfYr() {
		prfYr2020.click();
	}
	
	public void clickCurrencyFilter() {
		currencyFilter.click();
	}
	
	public void selectLocalCurrency() {
		localCurrency.click();
	}
	
	public String getPageheader() {
		return pageHeader.getText();
	}
	
	public String getRevenueTitle() {
		return revenueTitle.getText();
	}
	
	public Boolean revenueChartDisplay() {
		return revenueChart.isDisplayed();
	}
	
	public Boolean revenuePivotTableDisplay() {
		return revenuePivotTable.isDisplayed();
	}
	
	public String getRevenuePerABOTitle() {
		return revenuePerABOTitle.getText();
	}
	
	public Boolean revenuePerABOChartDisplay() {
		return revenuePerABOChart.isDisplayed();
	}
	
	public Boolean revenuePerABOPivotTableDisplay() {
		return revenuePerABOPivotTable.isDisplayed();
	}
	
	public String getGroupSalesPVTitle() {
		return groupSalesPVTitle.getText();
	}
	
	public Boolean groupSalesPVChartDisplay() {
		return groupSalesPVChart.isDisplayed();
	}
	
	public Boolean groupSalesPVPivotTableDisplay() {
		return groupSalesPVPivotTable.isDisplayed();
	}
	
	public String getGroupSalesPVABOTitle() {
		return groupSalesPVperABOTitle.getText();
	}
	
	public Boolean groupSalesPVABOChartDisplay() {
		return groupSalesPVperABOChart.isDisplayed();
	}
	
	public Boolean groupSalesPVABOPivotTableDisplay() {
		return groupSalesPVperABOPivotTable.isDisplayed();
	}
	
	public String getCustMemberTitle() {
		return custMemberTitle.getText();
	}
	
	public Boolean custMemberChartDisplay() {
		return custMemberChart.isDisplayed();
	}
	
	public Boolean custMemberPivotTableDisplay() {
		return custMemberPivotTable.isDisplayed();
	}
	
	public String getVcsPVTitle() {
		return vcsPVTitle.getText();
	}
	
	public Boolean vcsPVChartDisplay() {
		return vcsPVChart.isDisplayed();
	}
	
	public Boolean vcsPVPivotTableDisplay() {
		return vcsPVPivotTable.isDisplayed();
	}
	
	public String getPerctGSPVTitle() {
		return perctGSPVTitle.getText();
	}
	
	public Boolean perctGSPVChartDisplay() {
		return perctGSPVChart.isDisplayed();
	}
	
	public Boolean perctGSPVPivotTableDisplay() {
		return perctGSPVPivotTable.isDisplayed();
	}
}
